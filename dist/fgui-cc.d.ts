// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../fairygui-cc
//   ../simple-mvc-cc
//   ../fairygui-cc/Window

declare module 'simple-fgui-cc' {
    export { AlertTip } from 'simple-fgui-cc/AlertTip';
    export { AniWindow } from 'simple-fgui-cc/AniWindow';
    export { AppComp } from 'simple-fgui-cc/AppComp';
    export { AppScene } from 'simple-fgui-cc/AppScene';
    export { AppWindow } from 'simple-fgui-cc/AppWindow';
    export { FairyChild, IFairyChild, IFairyChildOnwer } from 'simple-fgui-cc/FairyChild';
    export { EVT_FAIRY_CLICK, EVT_FAIRY_HIDE, EVT_FAIRY_SHOW, EVT_STAGE_ADDED, EVT_STAGE_REMOVED, EVT_STAGE_RESIZE, EVT_UI_ONHIDE, EVT_UI_ONREADY, getFairyInstence, getFairyPath } from 'simple-fgui-cc/Main';
}

declare module 'simple-fgui-cc/AlertTip' {
    import { Window } from "fairygui-cc";
    import { AppComp } from "simple-fgui-cc/AppComp";
    export class AlertTip extends AppComp {
        static inst: AlertTip;
        tweenTime: number;
        protected showTime: number;
        protected lock: boolean;
        protected win: Window;
        protected timeoutId: number;
        setAndShow(content: string, y?: number, time?: number, lock?: boolean): AlertTip;
        hide(): void;
    }
}

declare module 'simple-fgui-cc/AniWindow' {
    import { GComponent, Window } from "fairygui-cc";
    export class AniWindow extends Window {
        constructor(comp: GComponent);
        doShowAnimation(): void;
        onShowAniComplete(): void;
        doHideAnimation(): void;
    }
}

declare module 'simple-fgui-cc/AppComp' {
    import { Controller, GButton, GComboBox, GComponent, GGraph, GGroup, GImage, GLabel, GList, GLoader, GMovieClip, GObject, GProgressBar, GRichTextField, GSlider, GTextField, GTextInput, Transition, Window } from "fairygui-cc";
    export class AppComp extends GComponent {
        contentPane: GComponent;
        constructor(viewComponent: GObject | string, pack?: string);
        bindChild(): void;
        onResize(): void;
        onClickButton(button: GButton): void;
        onCloseWindow(window: Window): void;
        setRoot(view: GComponent): void;
        getComp(path: string): GComponent;
        getLabel(path: string): GLabel;
        getProgressBar(path: string): GProgressBar;
        getTextField(path: string): GTextField;
        getRichTextField(path: string): GRichTextField;
        getTextInput(path: string): GTextInput;
        getLoader(path: string): GLoader;
        getList(path: string): GList;
        getGraph(path: string): GGraph;
        getGroup(path: string): GGroup;
        getSlider(path: string): GSlider;
        getComboBox(path: string): GComboBox;
        getImage(path: string): GImage;
        getMovieClip(path: string): GMovieClip;
        getController(path: string): Controller;
        getTransition(path: string): Transition;
        getButton(path: string, clickListener?: Function, parent?: GComponent): GButton;
        getWindow(path: string, closeListener?: Function, parent?: GComponent): Window;
        get mediatorName(): string;
        get viewComponent(): AppComp;
        onRegister(): void;
        onEvent(eventName: string, params?: any): void;
        onRemove(): void;
    }
}

declare module 'simple-fgui-cc/AppScene' {
    import { AppWindow } from "simple-fgui-cc/AppWindow";
    export class AppScene extends AppWindow {
        static current: AppScene;
        /**在部分场景中，如果直接使用instance of表达式可能会导致循环依赖的异常 */
        sceneName: string;
        static show(type: any, param?: any): AppScene;
        protected initConfig(): void;
        /** 场景显示，若已有场景，会自带切换功能(旧版逻辑在代码尾部，若遇到问题可参考) */
        show(): void;
        onHide(): void;
    }
}

declare module 'simple-fgui-cc/AppWindow' {
    import * as mvc from "simple-mvc-cc";
    import { Controller, GButton, GComboBox, GComponent, GGraph, GGroup, GImage, GLabel, GList, GLoader, GMovieClip, GProgressBar, GRichTextField, GSlider, GTextField, GTextInput, Transition, Window } from "fairygui-cc";
    import { IUISource } from "fairygui-cc/Window";
    import { FairyChild, IFairyChild, IFairyChildOnwer } from "simple-fgui-cc/FairyChild";
    export class AppWindow extends Window implements IFairyChild, IFairyChildOnwer, mvc.IMediator {
        static configLoadingWaiting: string;
        static show(type: any, param?: any): AppWindow;
        /**点击空白处关闭 */
        hideOnTap: boolean;
        /** 资源的包名 */
        pack: string;
        /** 加载地址前缀 */
        prefix: string;
        /** 是否 是一个全屏界面，全屏界面会无视isCenter属性 */
        isFullScreen: boolean;
        /** 是否 是一个居中对齐的界面 */
        isCenter: boolean;
        /** 是否 是一个被弹出管理的window，此类window点击空白处即关闭 */
        isPopup: boolean;
        /** 指定进场动画函数 */
        showAnimation: (window: AppWindow, complete: Function) => void;
        /** 指定出场动画函数 */
        hideAnimation: (window: AppWindow, complete: Function) => void;
        /** 打开win时需要传递的参数 */
        protected openData: any;
        /** 导出的组件名，组件所在的包，指定加载的(如果纹理需要独立加载的情况) */
        constructor(name: string, pack: string, ...sources: IUISource[]);
        protected onStageEvent(type: string): void;
        protected initConfig(): void;
        show(): void;
        showByParams(param?: any): AppWindow;
        hide(): void;
        protected hideThenCall: Function;
        protected hideThenObj: any;
        hideThen(next: Function, nextObj: any): void;
        init(): void;
        protected loadingWaitPane: GComponent;
        protected showLoadingWait(): void;
        protected layoutLoadingWaitPane(): void;
        protected closeLoadingWait(): void;
        protected onInit(): void;
        protected topArea: GComponent;
        protected bottomArea: GComponent;
        protected centerArea: GComponent;
        protected transShowName: string;
        protected transHideName: string;
        protected doShowAnimation(): void;
        protected doHideAnimation(): void;
        protected onShowAniComplete(): void;
        protected onHideAniComplete(): void;
        onResize(): void;
        bindChild(): void;
        refreshUi(): void;
        onClickButton(button: GButton): void;
        onCloseWindow(window: Window): void;
        onSubWindowClose(win: AppWindow): void;
        /** 绑定在此窗口下的子窗口列表 */
        subWindowsList: {
            [name: string]: AppWindow;
        };
        /** 当前窗口绑定在哪个窗口下，缓存在此变量中 */
        ownerWindow: AppWindow;
        /** 注册一个子窗口，随后可以用字符串打开该窗口，并绑定了子窗口该子窗口，详见bindSubWindow */
        registerSubWindow(WinClass: any, name: string, pack?: string, tex?: string): AppWindow;
        /** 绑定一个窗口实例为当前窗口的子窗口，启动关闭将会有冒泡联动通知（比如：用于刷新） */
        bindSubWindow(win: AppWindow): AppWindow;
        /** 打开一个子窗口 */
        showSubWindow(name: string, openData?: any): AppWindow;
        /** 关闭所有子窗口 */
        closeAllSubWindow(): void;
        /** 刷新父窗口界面(使用场景举例：子界面某操作更新大厅数据) */
        refreshOwnerWindow(): void;
        protected uiMediators: mvc.IMediator[];
        registerMediators(): void;
        removeMediators(): void;
        protected fairyAdapter: FairyChild;
        setRoot(view: GComponent): void;
        getComp(path: string): GComponent;
        getLabel(path: string): GLabel;
        getProgressBar(path: string): GProgressBar;
        getTextField(path: string): GTextField;
        getRichTextField(path: string): GRichTextField;
        getTextInput(path: string): GTextInput;
        getLoader(path: string): GLoader;
        getList(path: string): GList;
        getGraph(path: string): GGraph;
        getGroup(path: string): GGroup;
        getSlider(path: string): GSlider;
        getComboBox(path: string): GComboBox;
        getImage(path: string): GImage;
        getMovieClip(path: string): GMovieClip;
        getController(path: string): Controller;
        getTransition(path: string): Transition;
        getButton(path: string, clickListener?: Function, parent?: GComponent): GButton;
        getWindow(path: string, closeListener?: Function, parent?: GComponent): Window;
        protected mediatorAdapter: mvc.Mediator;
        get mediatorName(): string;
        get viewComponent(): AppWindow;
        eventList: (string | mvc.IMediatorCaller)[];
        onRegister(): void;
        onEvent(eventName: string, params: any): void;
        onRemove(): void;
    }
}

declare module 'simple-fgui-cc/FairyChild' {
    import { Controller, GButton, GComboBox, GComponent, GGraph, GGroup, GImage, GLabel, GList, GLoader, GMovieClip, GObject, GProgressBar, GRichTextField, GSlider, GTextField, GTextInput, Transition, Window } from "fairygui-cc";
    export interface IFairyChildOnwer {
        onClickButton(view: GButton): void;
        onCloseWindow(window: Window): void;
    }
    export interface IFairyChild {
        setRoot(view: GComponent): void;
        getComp(path: string): GComponent;
        getButton(path: string): GButton;
        getLabel(path: string): GLabel;
        getProgressBar(path: string): GProgressBar;
        getTextField(path: string): GTextField;
        getRichTextField(path: string): GRichTextField;
        getTextInput(path: string): GTextInput;
        getLoader(path: string): GLoader;
        getList(path: string): GList;
        getGraph(path: string): GGraph;
        getGroup(path: string): GGroup;
        getSlider(path: string): GSlider;
        getComboBox(path: string): GComboBox;
        getImage(path: string): GImage;
        getMovieClip(path: string): GMovieClip;
        getController(path: string): Controller;
        getTransition(path: string): Transition;
        getWindow(path: string): Window;
    }
    export class FairyChild implements IFairyChildOnwer {
        static TEMP: FairyChild;
        protected owner: IFairyChildOnwer;
        protected viewComponent: GComponent;
        constructor(viewComponent?: any, owner?: IFairyChildOnwer);
        setRoot(viewRoot: GComponent, owner?: IFairyChildOnwer): FairyChild;
        onClickButton(button: GButton): void;
        onCloseWindow(window: Window): void;
        /**
          * 根据点运算符获取末端对象
          * @param path 点运算路径
          * @param view 要获取的对象的相对更路径
          * @param type 要获取对象的类型（全小写的对象类型名称）
          */
        protected getObj(path: string, view?: GComponent, type?: string): GObject | Controller | Transition;
        getComp(path: string): GComponent;
        getButton(path: string, clickListener?: Function, parent?: GComponent): GButton;
        getLabel(path: string): GLabel;
        getProgressBar(path: string): GProgressBar;
        getTextField(path: string): GTextField;
        getRichTextField(path: string): GRichTextField;
        getTextInput(path: string): GTextInput;
        getLoader(path: string): GLoader;
        getList(path: string): GList;
        getGraph(path: string): GGraph;
        getGroup(path: string): GGroup;
        getSlider(path: string): GSlider;
        getComboBox(path: string): GComboBox;
        getImage(path: string): GImage;
        getMovieClip(path: string): GMovieClip;
        getController(path: string): Controller;
        getTransition(path: string): Transition;
        getWindow(name: string, closeListener?: Function, parent?: GComponent): Window;
    }
}

declare module 'simple-fgui-cc/Main' {
    export const EVT_FAIRY_CLICK = "EVT_FAIRY_CLICK";
    export const EVT_STAGE_ADDED = "EVT_STAGE_ADDED";
    export const EVT_FAIRY_SHOW = "EVT_FAIRY_SHOW";
    export const EVT_STAGE_REMOVED = "EVT_STAGE_REMOVED";
    export const EVT_FAIRY_HIDE = "EVT_FAIRY_HIDE";
    export const EVT_STAGE_RESIZE = "EVT_STAGE_RESIZE";
    export const EVT_UI_ONREADY = "EVT_UI_ONREADY";
    export const EVT_UI_ONHIDE = "EVT_UI_ONHIDE";
    export var fairyUrlLocalPrefix: string;
    export var fairyUrlRemotePrefix: string;
    export function getFairyPath(obj: any): any;
    export function getFairyInstence(type: any, ...args: any[]): any;
}

