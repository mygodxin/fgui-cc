// Generated by dts-bundle v0.7.3

declare module 'simple-mvc-cc' {
    export interface IEventDispatcher {
            on(type: string, thisObj: any, callback: Function, params?: any[]): any;
            off(type: string, thisObj: any, callback: Function): any;
            event(type: string, data?: any): any;
    }
    /**
        * 初始化 mvc功能，需要使用标准接口，实现事件收发器（具体参考各大引擎）
        * @param evtInst
        */
    export function init(evtInst: IEventDispatcher): void;
    /**
        * 发布一个事件，会同时响应：所有mvc.on监听的事件、新的ICommand实例、IMediator的onEvent函数。
        * 3个响应方式级别相同，先后顺序由注册顺序决定
        * 自定义的函数响应，使用on注册，使用off关闭，使用once监听一次自动关闭
        * Mediator使用registerMediator注册，使用removeMediator关闭
        * Command使用registerCommand注册，使用removeCommand关闭
        * @param eventName 事件名
        * @param params 事件参数
        */
    export function send(eventName: string, params?: any): void;
    export function on(eventName: string, callback: Function, thisObj?: any): void;
    export function off(eventName: string, callback: Function, thisObj?: any): void;
    export function once(eventName: string, callback: Function, thisObj?: any): void;
    export interface ICommand {
            execute(eventName: string, params: any): void;
    }
    export function registerCommand(eventName: string, commandClassRef: any): void;
    export function removeCommand(eventName: string): void;
    export function executeCommand(eventName: string, CommandClassRef: any, params?: any): void;
    export function hasCommand(eventName: string): boolean;
    export interface IMediatorCaller {
            name: string;
            handler: Function | Function[];
    }
    export interface IMediator {
            mediatorName: string;
            viewComponent: any;
            eventList: (string | IMediatorCaller)[];
            onRegister(): void;
            onEvent(eventName: string, params: any): void;
            onRemove(): void;
    }
    export class Mediator implements IMediator {
            mediatorName: any;
            viewComponent: any;
            constructor(name?: any, view?: any);
            get eventList(): (string | IMediatorCaller)[];
            set eventList(val: (string | IMediatorCaller)[]);
            onRegister(): void;
            onEvent(eventName: string, params: any): void;
            onRemove(): void;
    }
    export function registerMediator(mediator: IMediator): void;
    export function removeMediator(mediatorName: string): IMediator;
    export function retrieveMediator(mediatorName: string): IMediator;
    export function hasMediator(mediatorName: string): boolean;
    export function hasInMediator(eventName: string): boolean;
}

